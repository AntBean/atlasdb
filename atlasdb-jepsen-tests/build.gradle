apply plugin: 'org.inferred.processors'
apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'com.github.johnrengelman.shadow'

apply from: "../gradle/publish-jars.gradle"
apply from: "../gradle/shared.gradle"

configurations {
    explicitShadow
    compile.extendsFrom(explicitShadow)
    shadow.extendsFrom(explicitShadow)
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.avast.gradle:docker-compose-gradle-plugin:0.3.5'
    }
}

apply plugin: 'docker-compose'

task runUnitTestsForPrintLogsInChronologicalOrderScript(type: Exec) {
   commandLine 'python', 'scripts/print_logs_in_chronological_order.py', '--tests-only'
}

testSets {
  integTest
}

jacocoTestReport {
    executionData test, integTest
}

check.dependsOn integTest
check.dependsOn runUnitTestsForPrintLogsInChronologicalOrderScript

dependencies {
    explicitShadow project(':atlasdb-config')

    explicitShadow group: 'com.fasterxml.jackson.core', name: 'jackson-core'
    explicitShadow group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    explicitShadow group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8'
    explicitShadow group: 'com.google.guava', name: 'guava'
    explicitShadow group: 'one.util', name: 'streamex'
    explicitShadow group: 'org.clojure', name: 'clojure'
    explicitShadow group: 'org.slf4j', name: 'slf4j-api'

    processor group: 'org.immutables', name: 'value'

    integTestCompile group: 'org.assertj', name: 'assertj-core'
    integTestCompile group: 'org.hamcrest', name: 'hamcrest-library'
    integTestCompile group: 'org.mockito', name: 'mockito-core'
}

shadowJar {
    println "Creating shadowJar............."
    mergeServiceFiles()
    classifier ''
}

task copyShadowJar(type: Copy, dependsOn: 'shadowJar') {
    from tasks.getByPath('shadowJar').outputs
    into 'resources/atlasdb/'
    rename { filename -> 'atlasdb-jepsen-tests-all.jar' }
}

task copyTimelockServer(type: Copy, dependsOn: ':timelock-server-distribution:distTar') {
    from tasks.getByPath(':timelock-server-distribution:distTar').outputs
    into 'resources/atlasdb/'
    rename { filename -> 'timelock-server.tgz' }
}

task jepsenTest(type: Exec, dependsOn: ['copyShadowJar', 'copyTimelockServer']) {
    environment = project.dockerCompose.environment
    commandLine project.dockerCompose.composeCommand('run', '--rm', 'jepsen')
}

check.dependsOn jepsenTest

task hello << {
//  println groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(AbstractCompile))
//  println rootProject.AbstractCompile.classpath

  project.tasks.withType(AbstractCompile) {
   	it.classpath += project.configurations.shadow
        println it.classpath + "xyz"
  }
}
